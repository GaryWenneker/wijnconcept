/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { IUser, TSignOut } from "./api/auth";
import { IArticle } from "./api/articles";
import { IAPIErrors } from "./api/utils";
import { LocationSegments, MatchResults, RouteRenderProps, RouterHistory } from "@stencil/router";
import { IComment } from "./api/comments";
import { TTabTypes } from "./components/types";
import { IProfile } from "./api/profiles";
export namespace Components {
    interface AppFooter {
    }
    interface AppHeader {
        "signOut": TSignOut;
        "user"?: IUser;
    }
    interface ArticleList {
        "errors": IAPIErrors;
        "listedArticles": IArticle[];
        "user"?: IUser;
    }
    interface ArticleMeta {
        "article": IArticle;
        "followFavorite": (isFollow: boolean) => void;
        "history": RouterHistory;
        "user"?: IUser;
    }
    interface ArticlePage {
        "history": RouterHistory;
        "match": MatchResults;
        "user"?: IUser;
    }
    interface AuthPage {
        "match": MatchResults;
        "setUser": (user: IUser) => void;
    }
    interface CommentForm {
        "addComment": (comment: IComment) => void;
        "slug": string;
        "user": IUser;
    }
    interface EditorPage {
        "history": RouterHistory;
        "match": MatchResults;
        "user": IUser;
    }
    interface ErrorDisplay {
        "errors"?: IAPIErrors;
    }
    interface GlBackgroundVideo {
        "muted": boolean;
        "poster": string;
        "src": string;
    }
    interface HomeTags {
        "setTag": (tag: string) => void;
    }
    interface IpAppAbout {
    }
    interface IpAppHome {
    }
    interface IpAppRoot {
    }
    interface IpStencilRouteListener {
        "props": RouteRenderProps | undefined;
    }
    interface LayoutPage {
        "user"?: IUser;
    }
    interface LoadingSpinner {
    }
    interface NotFound {
        "history": RouterHistory;
    }
    interface ProfilePage {
        "match": MatchResults;
        "user"?: IUser;
    }
    interface SettingsPage {
        "setUser": (user: IUser) => void;
        "user": IUser;
    }
    interface SingleComment {
        "comment": IComment;
        "removeComment": (id: number) => void;
        "slug": string;
        "user": IUser;
    }
    interface TabbedFeed {
        "activeTag"?: string;
        "clearTag"?: () => void;
        "isProfile"?: boolean;
        "possibleTabs": TTabTypes[];
        "profile"?: IProfile;
        "user"?: IUser;
    }
}
declare global {
    interface HTMLAppFooterElement extends Components.AppFooter, HTMLStencilElement {
    }
    var HTMLAppFooterElement: {
        prototype: HTMLAppFooterElement;
        new (): HTMLAppFooterElement;
    };
    interface HTMLAppHeaderElement extends Components.AppHeader, HTMLStencilElement {
    }
    var HTMLAppHeaderElement: {
        prototype: HTMLAppHeaderElement;
        new (): HTMLAppHeaderElement;
    };
    interface HTMLArticleListElement extends Components.ArticleList, HTMLStencilElement {
    }
    var HTMLArticleListElement: {
        prototype: HTMLArticleListElement;
        new (): HTMLArticleListElement;
    };
    interface HTMLArticleMetaElement extends Components.ArticleMeta, HTMLStencilElement {
    }
    var HTMLArticleMetaElement: {
        prototype: HTMLArticleMetaElement;
        new (): HTMLArticleMetaElement;
    };
    interface HTMLArticlePageElement extends Components.ArticlePage, HTMLStencilElement {
    }
    var HTMLArticlePageElement: {
        prototype: HTMLArticlePageElement;
        new (): HTMLArticlePageElement;
    };
    interface HTMLAuthPageElement extends Components.AuthPage, HTMLStencilElement {
    }
    var HTMLAuthPageElement: {
        prototype: HTMLAuthPageElement;
        new (): HTMLAuthPageElement;
    };
    interface HTMLCommentFormElement extends Components.CommentForm, HTMLStencilElement {
    }
    var HTMLCommentFormElement: {
        prototype: HTMLCommentFormElement;
        new (): HTMLCommentFormElement;
    };
    interface HTMLEditorPageElement extends Components.EditorPage, HTMLStencilElement {
    }
    var HTMLEditorPageElement: {
        prototype: HTMLEditorPageElement;
        new (): HTMLEditorPageElement;
    };
    interface HTMLErrorDisplayElement extends Components.ErrorDisplay, HTMLStencilElement {
    }
    var HTMLErrorDisplayElement: {
        prototype: HTMLErrorDisplayElement;
        new (): HTMLErrorDisplayElement;
    };
    interface HTMLGlBackgroundVideoElement extends Components.GlBackgroundVideo, HTMLStencilElement {
    }
    var HTMLGlBackgroundVideoElement: {
        prototype: HTMLGlBackgroundVideoElement;
        new (): HTMLGlBackgroundVideoElement;
    };
    interface HTMLHomeTagsElement extends Components.HomeTags, HTMLStencilElement {
    }
    var HTMLHomeTagsElement: {
        prototype: HTMLHomeTagsElement;
        new (): HTMLHomeTagsElement;
    };
    interface HTMLIpAppAboutElement extends Components.IpAppAbout, HTMLStencilElement {
    }
    var HTMLIpAppAboutElement: {
        prototype: HTMLIpAppAboutElement;
        new (): HTMLIpAppAboutElement;
    };
    interface HTMLIpAppHomeElement extends Components.IpAppHome, HTMLStencilElement {
    }
    var HTMLIpAppHomeElement: {
        prototype: HTMLIpAppHomeElement;
        new (): HTMLIpAppHomeElement;
    };
    interface HTMLIpAppRootElement extends Components.IpAppRoot, HTMLStencilElement {
    }
    var HTMLIpAppRootElement: {
        prototype: HTMLIpAppRootElement;
        new (): HTMLIpAppRootElement;
    };
    interface HTMLIpStencilRouteListenerElement extends Components.IpStencilRouteListener, HTMLStencilElement {
    }
    var HTMLIpStencilRouteListenerElement: {
        prototype: HTMLIpStencilRouteListenerElement;
        new (): HTMLIpStencilRouteListenerElement;
    };
    interface HTMLLayoutPageElement extends Components.LayoutPage, HTMLStencilElement {
    }
    var HTMLLayoutPageElement: {
        prototype: HTMLLayoutPageElement;
        new (): HTMLLayoutPageElement;
    };
    interface HTMLLoadingSpinnerElement extends Components.LoadingSpinner, HTMLStencilElement {
    }
    var HTMLLoadingSpinnerElement: {
        prototype: HTMLLoadingSpinnerElement;
        new (): HTMLLoadingSpinnerElement;
    };
    interface HTMLNotFoundElement extends Components.NotFound, HTMLStencilElement {
    }
    var HTMLNotFoundElement: {
        prototype: HTMLNotFoundElement;
        new (): HTMLNotFoundElement;
    };
    interface HTMLProfilePageElement extends Components.ProfilePage, HTMLStencilElement {
    }
    var HTMLProfilePageElement: {
        prototype: HTMLProfilePageElement;
        new (): HTMLProfilePageElement;
    };
    interface HTMLSettingsPageElement extends Components.SettingsPage, HTMLStencilElement {
    }
    var HTMLSettingsPageElement: {
        prototype: HTMLSettingsPageElement;
        new (): HTMLSettingsPageElement;
    };
    interface HTMLSingleCommentElement extends Components.SingleComment, HTMLStencilElement {
    }
    var HTMLSingleCommentElement: {
        prototype: HTMLSingleCommentElement;
        new (): HTMLSingleCommentElement;
    };
    interface HTMLTabbedFeedElement extends Components.TabbedFeed, HTMLStencilElement {
    }
    var HTMLTabbedFeedElement: {
        prototype: HTMLTabbedFeedElement;
        new (): HTMLTabbedFeedElement;
    };
    interface HTMLElementTagNameMap {
        "app-footer": HTMLAppFooterElement;
        "app-header": HTMLAppHeaderElement;
        "article-list": HTMLArticleListElement;
        "article-meta": HTMLArticleMetaElement;
        "article-page": HTMLArticlePageElement;
        "auth-page": HTMLAuthPageElement;
        "comment-form": HTMLCommentFormElement;
        "editor-page": HTMLEditorPageElement;
        "error-display": HTMLErrorDisplayElement;
        "gl-background-video": HTMLGlBackgroundVideoElement;
        "home-tags": HTMLHomeTagsElement;
        "ip-app-about": HTMLIpAppAboutElement;
        "ip-app-home": HTMLIpAppHomeElement;
        "ip-app-root": HTMLIpAppRootElement;
        "ip-stencil-route-listener": HTMLIpStencilRouteListenerElement;
        "layout-page": HTMLLayoutPageElement;
        "loading-spinner": HTMLLoadingSpinnerElement;
        "not-found": HTMLNotFoundElement;
        "profile-page": HTMLProfilePageElement;
        "settings-page": HTMLSettingsPageElement;
        "single-comment": HTMLSingleCommentElement;
        "tabbed-feed": HTMLTabbedFeedElement;
    }
}
declare namespace LocalJSX {
    interface AppFooter {
    }
    interface AppHeader {
        "signOut"?: TSignOut;
        "user"?: IUser;
    }
    interface ArticleList {
        "errors"?: IAPIErrors;
        "listedArticles"?: IArticle[];
        "user"?: IUser;
    }
    interface ArticleMeta {
        "article"?: IArticle;
        "followFavorite"?: (isFollow: boolean) => void;
        "history"?: RouterHistory;
        "user"?: IUser;
    }
    interface ArticlePage {
        "history"?: RouterHistory;
        "match"?: MatchResults;
        "user"?: IUser;
    }
    interface AuthPage {
        "match"?: MatchResults;
        "setUser"?: (user: IUser) => void;
    }
    interface CommentForm {
        "addComment"?: (comment: IComment) => void;
        "slug"?: string;
        "user"?: IUser;
    }
    interface EditorPage {
        "history"?: RouterHistory;
        "match"?: MatchResults;
        "user"?: IUser;
    }
    interface ErrorDisplay {
        "errors"?: IAPIErrors;
    }
    interface GlBackgroundVideo {
        "muted"?: boolean;
        "poster"?: string;
        "src"?: string;
    }
    interface HomeTags {
        "setTag"?: (tag: string) => void;
    }
    interface IpAppAbout {
    }
    interface IpAppHome {
    }
    interface IpAppRoot {
    }
    interface IpStencilRouteListener {
        "onPageEnter"?: (event: CustomEvent<LocationSegments>) => void;
        "onPageLeave"?: (event: CustomEvent<LocationSegments>) => void;
        "props"?: RouteRenderProps | undefined;
    }
    interface LayoutPage {
        "user"?: IUser;
    }
    interface LoadingSpinner {
    }
    interface NotFound {
        "history"?: RouterHistory;
    }
    interface ProfilePage {
        "match"?: MatchResults;
        "user"?: IUser;
    }
    interface SettingsPage {
        "setUser"?: (user: IUser) => void;
        "user"?: IUser;
    }
    interface SingleComment {
        "comment"?: IComment;
        "removeComment"?: (id: number) => void;
        "slug"?: string;
        "user"?: IUser;
    }
    interface TabbedFeed {
        "activeTag"?: string;
        "clearTag"?: () => void;
        "isProfile"?: boolean;
        "possibleTabs"?: TTabTypes[];
        "profile"?: IProfile;
        "user"?: IUser;
    }
    interface IntrinsicElements {
        "app-footer": AppFooter;
        "app-header": AppHeader;
        "article-list": ArticleList;
        "article-meta": ArticleMeta;
        "article-page": ArticlePage;
        "auth-page": AuthPage;
        "comment-form": CommentForm;
        "editor-page": EditorPage;
        "error-display": ErrorDisplay;
        "gl-background-video": GlBackgroundVideo;
        "home-tags": HomeTags;
        "ip-app-about": IpAppAbout;
        "ip-app-home": IpAppHome;
        "ip-app-root": IpAppRoot;
        "ip-stencil-route-listener": IpStencilRouteListener;
        "layout-page": LayoutPage;
        "loading-spinner": LoadingSpinner;
        "not-found": NotFound;
        "profile-page": ProfilePage;
        "settings-page": SettingsPage;
        "single-comment": SingleComment;
        "tabbed-feed": TabbedFeed;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "app-footer": LocalJSX.AppFooter & JSXBase.HTMLAttributes<HTMLAppFooterElement>;
            "app-header": LocalJSX.AppHeader & JSXBase.HTMLAttributes<HTMLAppHeaderElement>;
            "article-list": LocalJSX.ArticleList & JSXBase.HTMLAttributes<HTMLArticleListElement>;
            "article-meta": LocalJSX.ArticleMeta & JSXBase.HTMLAttributes<HTMLArticleMetaElement>;
            "article-page": LocalJSX.ArticlePage & JSXBase.HTMLAttributes<HTMLArticlePageElement>;
            "auth-page": LocalJSX.AuthPage & JSXBase.HTMLAttributes<HTMLAuthPageElement>;
            "comment-form": LocalJSX.CommentForm & JSXBase.HTMLAttributes<HTMLCommentFormElement>;
            "editor-page": LocalJSX.EditorPage & JSXBase.HTMLAttributes<HTMLEditorPageElement>;
            "error-display": LocalJSX.ErrorDisplay & JSXBase.HTMLAttributes<HTMLErrorDisplayElement>;
            "gl-background-video": LocalJSX.GlBackgroundVideo & JSXBase.HTMLAttributes<HTMLGlBackgroundVideoElement>;
            "home-tags": LocalJSX.HomeTags & JSXBase.HTMLAttributes<HTMLHomeTagsElement>;
            "ip-app-about": LocalJSX.IpAppAbout & JSXBase.HTMLAttributes<HTMLIpAppAboutElement>;
            "ip-app-home": LocalJSX.IpAppHome & JSXBase.HTMLAttributes<HTMLIpAppHomeElement>;
            "ip-app-root": LocalJSX.IpAppRoot & JSXBase.HTMLAttributes<HTMLIpAppRootElement>;
            "ip-stencil-route-listener": LocalJSX.IpStencilRouteListener & JSXBase.HTMLAttributes<HTMLIpStencilRouteListenerElement>;
            "layout-page": LocalJSX.LayoutPage & JSXBase.HTMLAttributes<HTMLLayoutPageElement>;
            "loading-spinner": LocalJSX.LoadingSpinner & JSXBase.HTMLAttributes<HTMLLoadingSpinnerElement>;
            "not-found": LocalJSX.NotFound & JSXBase.HTMLAttributes<HTMLNotFoundElement>;
            "profile-page": LocalJSX.ProfilePage & JSXBase.HTMLAttributes<HTMLProfilePageElement>;
            "settings-page": LocalJSX.SettingsPage & JSXBase.HTMLAttributes<HTMLSettingsPageElement>;
            "single-comment": LocalJSX.SingleComment & JSXBase.HTMLAttributes<HTMLSingleCommentElement>;
            "tabbed-feed": LocalJSX.TabbedFeed & JSXBase.HTMLAttributes<HTMLTabbedFeedElement>;
        }
    }
}
